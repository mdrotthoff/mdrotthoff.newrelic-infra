#! /bin/bash
#
# latigid010@yahoo.com
# 01/06/2000
#
#  This Nagios plugin was created to check Oracle status
#
#  Local vAuto enhancements by david.rotthoff@vauto.com
#  2015.09.30 Enhanced to ensure that the Oracle data guard apply process is actually running on the designated
#             server.
#  2015.09.30 Refactored the shell script to that actually functionality is spread into the individual bash
#             functions rather than being all built into a monolithic set of code
#  2015.09.30 Enhanced how the script attempts to set an the ORACLE_HOME and TNS_ADMIN environment variables
#  2015.09.30 Added support of a local configuration file which can be used to define the ORACLE_HOME and
#             TNS_ADMIN environment variables

if test -x /usr/bin/printf; then
	ECHO=/usr/bin/printf
else
	ECHO='echo -n'
fi

PROGNAME=`basename $0`
PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION=`echo '$Revision: 1749 $' | sed -e 's/[^0-9.]//g'`

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4

print_revision() {
	echo "$1 v$2 (nagios-plugins 1.4.13)"
	${ECHO} "The nagios plugins come with ABSOLUTELY NO WARRANTY. You may redistribute\ncopies of the plugins under the terms of the GNU General Public License.\nFor more information about these matters, see the file named COPYING.\n" | sed -e 's/\n/ /g'
}

support() {
	${ECHO} "Send email to nagios-users@lists.sourceforge.net if you have questions\nregarding use of this software. To submit patches or suggest improvements,\nsend email to nagiosplug-devel@lists.sourceforge.net.\nPlease include version information with all correspondence (when possible,\nuse output from the --version option of the plugin itself).\n" | sed -e 's/\n/ /g'
}

load_config() {
  local config_value

  if [[ -z ${1} ]] ; then
    ${ECHO} "Configuration file not provided to load"
	exit ${STATE_UNKNOWN}
  fi

  config_value=`grep ORACLE_HOME ${1} | cut -f2 -d=`
  if ! [[ -z ${config_value} ]] ; then
    ORACLE_HOME=${config_value}
  fi

  config_value=`grep TNS_ADMIN ${1} | cut -f2 -d=`
  if ! [[ -z ${config_value} ]] ; then
    if [[ -f ${config_value}/tnsnames.ora ]] ; then
      TNS_ADMIN=${config_value}
	fi
  fi
}

set_oracle_home() {
  if ! [[ -z ${ORACLE_HOME} ]] ; then
	return
  fi

  if [[ -z ${1} ]] ; then
    ${ECHO} "SID not provided to locate an Oracle home with"
	exit ${STATE_UNKNOWN}
  fi

  if [[ -z ${ORACLE_HOME} ]] ; then
	# Adjust to taste
	for oratab in /var/opt/oracle/oratab /etc/oratab ; do
      [[ ! -f ${oratab} ]] && continue
	  
	  ORACLE_HOME=`grep "${1}" ${oratab} | cut -f2 -d:`
      [[ -n "$ORACLE_HOME" ]] && break
	done
fi
}

check_db() {
    local pmonchk
    local sid="${1}"
	
    if [[ -z ${sid} ]] ; then
       ${ECHO} "No SID provided to check"
       exit ${STATE_UNKNOWN}
    fi

    pmonchk=`ps -ef | grep -v grep | grep -c "ora_pmon_${sid}$"`
    pmonmsg="`ps -ef | grep -v grep | grep \"ora_pmon_${sid}$\" | awk '{print \"(Process: \" $8 \" Pid: \" $2 \")\"}'`"
    if [[ ${pmonchk} -eq 0 ]] ; then
       pmonchk=`ps -ef | grep -v grep | grep -c "ora_pmon_${sid}[0-9]$"`
       pmonmsg="`ps -ef | grep -v grep | grep \"ora_pmon_${sid}[0-9]$\" | awk '{print \"(Process: \" $8 \" Pid: \" $2 \")\"}'`"
       RAC='(RAC instance)' 
    fi
    

    if [[ ${pmonchk} -eq 1 ]] ; then
      ${ECHO} "${sid} OK - ${pmonchk} ${RAC} PMON process running - ${pmonmsg}"
      exit ${STATE_OK}
    fi

    ${ECHO} "${sid} ${RAC} Database PMON process is DOWN"
    exit ${STATE_CRITICAL}
}

check_dg_apply() {
    local pmonchk
	local sid="${1}"
	
	if [[ -z ${sid} ]] ; then
     ${ECHO} "No SID provided to check"
	 exit ${STATE_UNKNOWN}
	fi

    pmonchk=`ps -ef | grep -v grep | grep -c "ora_mrp0_${sid}[0-9]*$"`
    if [[ ${pmonchk} -ge 1 ]] ; then
      ${ECHO} "${sid} OK - ${pmonchk} MRP0 process(es) running"
	  exit ${STATE_OK}
	fi

	${ECHO} "${sid} Data guard apply process MRP0 is DOWN"
	exit ${STATE_CRITICAL}
}

check_tns() {
  local tnschk
  local tnschk2
  local tnschk3
  local TNSPING=`which tnsping`
  local sid="${1}"
  
  if [[ -z ${sid} ]] ; then
     ${ECHO} "No SID/IP address provided to check"
	 exit ${STATE_UNKNOWN}
  fi

  tnschk=` tnsping ${sid} | grep -E 'Attempting|OK \('`
  tnschk2=` echo  ${tnschk} | grep -c OK`
  if [[ ${tnschk2} -eq 1 ]] ; then 
    tnschk3=` echo ${tnschk} | sed -e 's/.*(//' -e 's/).*//' | cut -f1 -d' '`
	${ECHO} "OK - reply time ${tnschk3} ms from ${sid}|${tnschk3}ms"
	if [[ ${tnschk3} -gt 100 ]] ; then
	  exit ${STATE_OK}
	else
	  exit ${STATE_WARNING}
	fi
  fi

  ${ECHO} "No TNS Listener on ${sid}"
  exit ${STATE_CRITICAL}
}

check_login() {
  local loginchk
  local loginchk2
  local sid="${1}"

  if [[ -z ${sid} ]] ; then
    ${ECHO} "No SID provided to check"
    exit ${STATE_UNKNOWN}
  fi

  loginchk=`sqlplus dummy/user@${sid} < /dev/null`
  loginchk2=` echo  ${loginchk} | grep -c ORA-01017`
  if [[ ${loginchk2} -eq 1 ]] ; then 
    ${ECHO} "OK - SID ${sid} - dummy login connected"
	exit ${STATE_OK}
  fi

  loginchk3=` echo "$loginchk" | grep "ORA-" | head -1`
  ${ECHO} "CRITICAL - SID ${sid} - $loginchk3"
  exit ${STATE_CRITICAL}
}

check_cache() {
  local error
  local result
  local buf_hr
  local buf_hrx
  local lib_hr
  local lib_hrx
  local sid="${1}"
  local username="${2}"
  local password="${3}"
  local critlvl="${4}"
  local warnlvl="${5}"

  if [[ ${critlvl} -gt ${warnlvl} ]] ; then
    ${ECHO} "UNKNOWN - Warning level is less then Crit"
    exit ${STATE_UNKNOWN}
  fi
  result=`sqlplus -s ${username}/${password}@${sid} << EOF
set pagesize 0
set numf '9999999.99'
select (1-(pr.value/(dbg.value+cg.value)))*100
from v\\$sysstat pr, v\\$sysstat dbg, v\\$sysstat cg
where pr.name='physical reads'
and dbg.name='db block gets'
and cg.name='consistent gets';
EOF`

  if [[ -n "`echo $result | grep ORA-`" ]] ; then
    error=` echo "${result}" | grep "ORA-" | head -1`
    ${ECHO} "CRITICAL - SID ${sid} - ${error}"
    exit ${STATE_CRITICAL}
  fi

  buf_hr=`echo "$result" | awk '/^[0-9\. \t]+$/ {print int($1)}'` 
  buf_hrx=`echo "$result" | awk '/^[0-9\. \t]+$/ {print $1}'` 
  result=`sqlplus -s ${username}/${password}@${sid} << EOF
set pagesize 0
set numf '9999999.99'
select sum(lc.pins)/(sum(lc.pins)+sum(lc.reloads))*100
from v\\$librarycache lc;
EOF`
	
  if [[ -n "`echo $result | grep ORA-`" ]] ; then
    error=` echo "$result" | grep "ORA-" | head -1`
    ${ECHO} "CRITICAL - SID ${sid} - ${error}"
    exit ${STATE_CRITICAL}
  fi

  lib_hr=`echo "$result" | awk '/^[0-9\. \t]+$/ {print int($1)}'`
  lib_hrx=`echo "$result" | awk '/^[0-9\. \t]+$/ {print $1}'`

  if [[ ${buf_hr} -le ${critlvl} ]] || [[ ${lib_hr} -le ${critlvl} ]] ; then
    ${ECHO} "CRITICAL - SID ${sid} - Cache Hit Rates: ${lib_hrx}%% Lib -- ${buf_hrx}%% Buff|lib=${lib_hrx}%%;${warnlvl};${critlvl};0;100 buffer=${buf_hrx}%%;${warnlvl};${critlvl};0;100"
    exit ${STATE_CRITICAL}
  fi
  if [[ ${buf_hr} -le ${warnlvl} ]] || [[ ${lib_hr} -le ${warnlvl} ]] ; then
    ${ECHO} "WARNING - ${sid} - Cache Hit Rates: ${lib_hrx}%% Lib -- ${buf_hrx}%% Buff|lib=${lib_hrx}%%;${warnlvl};${critlvl};0;100 buffer=${buf_hrx}%%;${warnlvl};${critlvl};0;100"
    exit ${STATE_WARNING}
  fi
  ${ECHO} "OK - SID ${sid} - Cache Hit Rates: ${lib_hrx}%% Lib -- ${buf_hrx}%% Buff|lib=${lib_hrx}%%;${warnlvl};${critlvl};0;100 buffer=${buf_hrx}%%;${warnlvl};${critlvl};0;100"
  exit ${STATE_OK}
}

check_tablespace() {
  local result
  local ts_free
  local ts_total
  local ts_pct
  local ts_pctx
  local sid="${1}"
  local username="${2}"
  local password="${3}"
  local tablespace="${4}"
  local critlvl="${5}"
  local warnlvl="${6}"
  
  if [[ ${critlvl} -lt ${warnlvl} ]] ; then
    ${ECHO} "UNKNOWN - Warning level is more then Crit"
    exit ${STATE_UNKNOWN}
  fi
  result=`sqlplus -s ${username}/${password}@${sid} << EOF
set pagesize 0
set numf '9999999.99'
select NVL(b.free,0.0),a.total,100 - trunc(NVL(b.free,0.0)/a.total * 1000) / 10 prc
from (
select tablespace_name,sum(bytes)/1024/1024 total
from dba_data_files group by tablespace_name) A
LEFT OUTER JOIN
( select tablespace_name,sum(bytes)/1024/1024 free
from dba_free_space group by tablespace_name) B
ON a.tablespace_name=b.tablespace_name WHERE a.tablespace_name='${tablespace}';
EOF`

  if [[ -n "`echo $result | grep ORA-`" ]] ; then
    error=` echo "$result" | grep "ORA-" | head -1`
    ${ECHO} "CRITICAL - ${error}"
    exit ${STATE_CRITICAL}
  fi

  ts_free=`echo "$result" | awk '/^[ 0-9\.\t ]+$/ {print int($1)}'` 
  ts_total=`echo "$result" | awk '/^[ 0-9\.\t ]+$/ {print int($2)}'` 
  ts_pct=`echo "$result" | awk '/^[ 0-9\.\t ]+$/ {print int($3)}'` 
  ts_pctx=`echo "$result" | awk '/^[ 0-9\.\t ]+$/ {print $3}'` 
  if [[ "${ts_free}" -eq 0 ]] &&  [[ "${ts_total}" -eq 0 ]] && [[ "${ts_pct}" -eq 0 ]] ; then
    ${ECHO} "No data returned by Oracle - tablespace ${tablespace} not found?"
    exit ${STATE_UNKNOWN}
  fi
  if [[ "${ts_pct}" -ge ${critlvl} ]] ; then
  	${ECHO} "${sid} : ${tablespace} CRITICAL - ${ts_pctx}%% used [ ${ts_free} / ${ts_total} MB available ]|${tablespace}=${ts_pctx}%%;${warnlvl};${critlvl};0;100"
	exit ${STATE_CRITICAL}
  fi
  if [[ "${ts_pct}" -ge ${warnlvl} ]] ; then
  	${ECHO} "${sid} : ${tablespace} WARNING  - ${ts_pctx}%% used [ ${ts_free} / ${ts_total} MB available ]|${tablespace}=${ts_pctx}%%;${warnlvl};${critlvl};0;100"
	exit ${STATE_WARNING}
  fi
  ${ECHO} "${sid} : ${tablespace} OK - ${ts_pctx}%% used [ ${ts_free} / ${ts_total} MB available ]|${tablespace}=${ts_pctx}%%;${warnlvl};${critlvl};0;100"
  exit ${STATE_OK}
}

print_usage() {
  echo "Usage:"
  echo "  $PROGNAME --tns <Oracle Sid or Hostname/IP address>"
  echo "  $PROGNAME --db <ORACLE_SID>"
  echo "  $PROGNAME --dg_apply <ORACLE_SID>"
  echo "  $PROGNAME --login <ORACLE_SID>"
  echo "  $PROGNAME --cache <ORACLE_SID> <USER> <PASS> <CRITICAL> <WARNING>"
  echo "  $PROGNAME --tablespace <ORACLE_SID> <USER> <PASS> <TABLESPACE> <CRITICAL> <WARNING>"
  echo "  $PROGNAME --oranames <Hostname>"
  echo "  $PROGNAME --help"
  echo "  $PROGNAME --version"
}

print_help() {
  print_revision $PROGNAME $REVISION
  echo ""
  print_usage
  echo ""
  echo "Check Oracle status"
  echo ""
  echo "--tns SID/IP Address"
  echo "  Check TNS server is active"
  echo "--db SID"
  echo "  Check for the local PMON process for the supplied SID"
  echo "--dg_apply SID"
  echo "  Check for the local MRP0 data guard apply process for"
  echo "  the supplied SID"
  echo "--login SID"
  echo "  Attempt a dummy login and alert if not ORA-01017: invalid username/password"
  echo "--cache SID username password critlevel warnlevel"
  echo "  Check local database for library and buffer cache hit ratios"
  echo "      --->  Requires Oracle user/password and SID specified."
  echo "      --->  Requires select on v_$sysstat and v_$librarycache"
  echo "--tablespace SID username password tablespace critlevel warnlevel"
  echo "  Check local database for tablespace capacity in ORACLE_SID"
  echo "      --->  Requires Oracle user/password specified."
  echo "      --->  Requires select on dba_data_files and dba_free_space"
  echo "--help"
  echo "  Print this help screen"
  echo "--version"
  echo "  Print version and license information"
  echo ""
  echo "If the plugin doesn't work, check that the ORACLE_HOME environment"
  echo "variable is set, that ORACLE_HOME/bin is in your PATH, and the"
  echo "tnsnames.ora file is locatable and is properly configured.  This may be"
  echo "configured by creating a file name check_oracle_vauto.cfg in the same"
  echo "directory as the plugin module with environment style lines for the"
  echo "ORACLE_HOME and TNS_ADMIN environment variables"
  echo ""
  echo "When checking local database status your ORACLE_SID is case sensitive."
  echo ""
  echo "If you want to use a default Oracle home, add in your oratab file:"
  echo "*:/opt/app/oracle/product/7.3.4:N"
  echo ""
  support
}

cmd="$1"

# Information options
case "$cmd" in
--help)
	print_help
    exit ${STATE_OK}
    ;;
-h)
	print_help
    exit ${STATE_OK}
    ;;
--version)
	print_revision $PROGNAME $REVISION
    exit ${STATE_OK}
    ;;
-V)
	print_revision $PROGNAME $REVISION
    exit ${STATE_OK}
    ;;
esac

if [[ -f ${PROGPATH}/${PROGNAME}.cfg ]] ; then
#  echo "Loading configuration ${PROGPATH}/${PROGNAME}.cfg"
  load_config ${PROGPATH}/${PROGNAME}.cfg
fi

set_oracle_home ${2}
PATH=$PATH:$ORACLE_HOME/bin
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME/lib
export ORACLE_HOME PATH LD_LIBRARY_PATH

# Process status options
case "$cmd" in
--dg_apply)
	check_dg_apply ${2}
    ;;
--db)
	check_db ${2}
    ;;
--tns)
	check_tns ${2}
    ;;
esac

#if [ "$cmd" != "--db" ]; then
	if [[ -z "${ORACLE_HOME}" ]] && ! [[ -d "${ORACLE_HOME}" ]] ; then
		${ECHO} "Cannot determine ORACLE_HOME for sid ${2}"
		exit ${STATE_UNKNOWN}
	fi
#fi

# Process database checks
case "$cmd" in
--login)
	check_login ${2}
    ;;
--cache)
	check_cache ${2} ${3} ${4} ${5} ${6}
    ;;
--tablespace)
	echo "check_tablespace ${2} ${3} ${5} ${6} ${7}"
	check_tablespace ${2} ${3} ${4} ${5} ${6} ${7}
    ;;
*)
    print_usage
    exit ${STATE_UNKNOWN}
esac
