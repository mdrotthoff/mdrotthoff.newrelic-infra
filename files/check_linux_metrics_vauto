#!/usr/bin/env python2

# File: check_linux_metrics.py
# URL: https://github.com/kxr/check_linux_metrics
# Author: Khizer Naeem 
# Email: khizernaeem@gmail.com
# 
#
#  Copyright (c) 2015 Khizer Naeem (http://kxr.me)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Local vAuto enhancements by david.rotthoff@vauto.com

import sys
import time
import os
import shutil

INTERIM_DIR = '/usr/local/nagios/var/linux_metrics_vauto'
#INTERIM_DIR = '/tmp/linux_metrics_vauto'
if not os.path.exists(INTERIM_DIR):
    os.makedirs( INTERIM_DIR )




def check_net ( interface, warn=None, crit=None ):
    status_code = 0
    status_outp =''
    perfdata = ''

    #Verify if the interim file exists, if not create it now
    interim_file = INTERIM_DIR + '/' + 'proc_net_dev_' + interface
    if not os.path.isfile( interim_file ):
        shutil.copyfile( '/proc/net/dev', interim_file )
        print ( 'This was the first run, run again to get values: net:' + interface )
        sys.exit( 0 )

    # Get mtime of the interim file and calculate the sample period
    sample_period = float ( time.time() - os.path.getmtime( interim_file ) )

    # Calculate the deltas
    int_t = {}
    int_d = {}
    for file in ['/proc/net/dev', interim_file]:
        f = open( file, 'r' )
        try:
            for line in f:
                line = line.strip()
                if line.startswith( interface+':' ):
                    seq = 0
                    for x in ['r_bytes','r_packets','r_errs','r_drop','r_fifo','r_frame','r_compressed','r_multicast',
                        't_bytes','t_packets','t_errs','t_drop','t_fifo','t_colls','t_carrier','t_compressed']:
                        # if files is current/proc, load values in int_t
                        if file == '/proc/net/dev':
                            int_t[x] = int( line.split( interface+':' )[1].split()[seq] )
                        # if file is interim calculate the diff and load deltas in int_d
                        elif file == interim_file:
                            interim_value = int( line.split( interface+':' )[1].split()[seq] )
                            int_d[x] = int_t[x] - interim_value
                        seq += 1
                    break
        finally:
            f.close()
    if not int_t or not int_d:
        #interface not found
        print ( 'Plugin Error: Network device not found: ('+interface+')' )
        sys.exit( 3 )
    else:
        int_d['RX_MBps'] = float( int_d['r_bytes'] / 1024.00 / 1024.00 / sample_period )
        int_d['TX_MBps'] = float( int_d['t_bytes'] / 1024.00 / 1024.00 / sample_period )
        int_d['RX_PKps'] = float( int_d['r_packets'] / sample_period )
        int_d['TX_PKps'] = float( int_d['t_packets'] / sample_period )

        status_outp += interface
        status_outp += ' Rx: ' + str( '%.2f' % int_d['RX_MBps'] ) + ' MB/s (' + str( '%.2f' % int_d['RX_PKps'] ) + ' p/s)'
        status_outp += ' Tx: ' + str( '%.2f' % int_d['TX_MBps'] ) + ' MB/s (' + str( '%.2f' % int_d['TX_PKps'] ) + ' p/s)'
        status_outp += ' [t:' + str( '%.2f' % sample_period ) + ']'

        # Check packet errors
        int_d['PK_ERRORS'] = 0
        for x in ['r_errs','r_drop','r_fifo','r_frame',
            't_errs','t_drop','t_fifo','t_colls','t_carrier']:
            if float( int_d[x] ) > 0:
                int_d['PK_ERRORS'] += int_d[x]
                status_code = 2
                status_outp += ' (Critical ' + x + ':' + str(int_d[x]) + ')'
        # Skip bw checks if packer error
        if warn is not None and crit is not None and int_d['PK_ERRORS'] == 0:
            if float( int_d['RX_MBps'] ) >= float( crit[0] ) or float( int_d['TX_MBps'] ) >= float( crit[1] ):
                status_code = 2
                status_outp += ' (Critical BW)'
            elif float( int_d['RX_MBps'] ) >= float( warn[0] ) or float( int_d['TX_MBps'] ) >= float( warn[1] ):
                if status_code < 1:
                    status_code = 1
                status_outp += ' (Warning BW)'
            else:
                status_outp += ' (OK)'

        for x in [ 'RX_MBps', 'RX_PKps', 'TX_MBps', 'TX_PKps', 'PK_ERRORS']:
            perfdata += x + '=' + str( '%.2f' % int_d[x] ) 
            if warn is not None and crit is not None :
                if x == 'RX_MBps':
                    perfdata += ';' + str(warn[0]) + ';' + str(crit[0])
                elif x == 'TX_MBps':
                    perfdata += ';' + str(warn[1]) + ';' + str(crit[1])
            perfdata += ' '
        #remove last space
        perfdata = perfdata[:-1]

        #update the interim file
        shutil.copyfile( '/proc/net/dev', interim_file )

        print (status_outp + ' | ' + perfdata)
        sys.exit( status_code )


def copy_interface_data ( filein, fileout, interface):
    f = open( filein, 'r' )
    f1 = open( fileout, 'w' )
    try:
        for line in f:
            line = line.strip()
            if line.startswith( interface+':' ):
                f1.write(line)
                break
    finally:
        f.close()
        f1.close()

def check_network_bandwidth ( interface, warn=None, crit=None ):
    interface_found = 0
    status_code = 0
    status_outp =''
    status_message ='(OK)'
    perfdata = ''

    #Verify if the interim file exists, if not create it now
    interim_file = INTERIM_DIR + '/' + 'proc_net_dev_bw_' + interface
    if not os.path.isfile( interim_file ):
        file = '/proc/net/dev'
        f = open( file, 'r' )
        try:
            for line in f:
                line = line.strip()
                if line.startswith( interface+':' ):
                    interface_found = 1
                    break
        finally:
            f.close()

        if interface_found == 0:
            print ( 'Network device not found for interface '+interface )
            sys.exit( 3 )

        copy_interface_data('/proc/net/dev', interim_file, interface)
        print ( 'This was the first run, run again to get values for interface ' + interface )
        sys.exit( 1 )

    # Get mtime of the interim file and calculate the sample period
    sample_period = float ( time.time() - os.path.getmtime( interim_file ) )

    # Calculate the deltas
    int_t = {}
    int_d = {}
    for file in ['/proc/net/dev', interim_file]:
        f = open( file, 'r' )
        try:
            for line in f:
                line = line.strip()
                if line.startswith( interface+':' ):
                    seq = 0
                    for x in ['r_bytes','r_packets','r_errs','r_drop','r_fifo','r_frame','r_compressed','r_multicast',
                        't_bytes','t_packets','t_errs','t_drop','t_fifo','t_colls','t_carrier','t_compressed']:
                        # if files is current/proc, load values in int_t
                        if file == '/proc/net/dev':
                            int_t[x] = int( line.split( interface+':' )[1].split()[seq] )
                        # if file is interim calculate the diff and load deltas in int_d
                        elif file == interim_file:
                            interim_value = int( line.split( interface+':' )[1].split()[seq] )
                            int_d[x] = int_t[x] - interim_value
                        seq += 1
                    break
        finally:
            f.close()

#   Zero length interim file results in network device not found.  Should
#   just handle it the same as a first run and continue.
    if not int_t:
        #interface not found in /proc/net/dev
        print ( 'Plugin Error: Network device not found: ('+interface+')' )
        sys.exit( 3 )

    elif not int_d:
        #interface not found in interim file
        copy_interface_data('/proc/net/dev', interim_file, interface)
        print ( 'Rebuilding missing interim file, run again to get values for interface ' + interface )
        sys.exit( 1 )

    else:
        try:
            f = open( '/sys/class/net/'+interface+'/speed', 'r' )
            for line in f:
                speed = int(line.strip()) / 8
                break
        finally:
            f.close()

        try:
            f = open( '/sys/class/net/'+interface+'/duplex', 'r' )
            for line in f:
                duplex = line.strip()
                break
        finally:
            f.close()
        try:
            f = open( '/sys/class/net/'+interface+'/mtu', 'r' )
            for line in f:
                mtu = line.strip()
                break
        finally:
            f.close()

        int_d['RX_MBps'] = float( int_d['r_bytes'] / 1024.00 / 1024.00 / sample_period )
        if int_d['RX_MBps'] < 0:
            copy_interface_data('/proc/net/dev', interim_file, interface)
            print ( 'System restart since last check, run again to get values for interface ' + interface )
            sys.exit( 0 )
        
        int_d['TX_MBps'] = float( int_d['t_bytes'] / 1024.00 / 1024.00 / sample_period )
        int_d['RX_Util'] = float( (int_d['RX_MBps'] / speed) * 100 )
        int_d['TX_Util'] = float( (int_d['TX_MBps'] / speed) * 100 )
        int_d['Total_Util'] = float( ( (int_d['RX_MBps'] + int_d['TX_MBps'] ) / speed ) * 100 )

        status_outp += 'Interface: ' + interface + ' '
        status_outp += ' Speed: ' + str( '%d' % speed ) + ' MB/sec '
        status_outp += ' Duplex: ' + str( '%s ' % duplex )
        status_outp += ' MTU: ' + str( '%s ' % mtu )
        status_outp += ' Rx: ' + str( '%.2f' % int_d['RX_MBps'] ) + ' MB/sec '
        if duplex == 'full':
            status_outp += '(' + str( '%.2f' % int_d['RX_Util'] ) + '%) '
        status_outp += ' Tx: ' + str( '%.2f' % int_d['TX_MBps'] ) + ' MB/sec '
        if duplex == 'full':
            status_outp += '(' + str( '%.2f' % int_d['TX_Util'] ) + '%) '
        status_outp += ' Total: ' + str( '%.2f' % (int_d['TX_MBps'] + int_d['RX_MBps']) ) + ' MB/sec '
        if duplex != 'full':
            status_outp += '(' + str( '%.2f' % int_d['Total_Util'] ) + '%) '
        status_outp += ' [' + str( '%.2f' % sample_period ) + ' seconds]'

        # Calculate the current bandwidth status
        if warn is not None and crit is not None:
            if duplex == 'full':
                if float( int_d['RX_Util'] ) >= float( crit ) or float( int_d['TX_Util'] ) >= float( crit ):
                    status_code = 2
                    status_message = '(Critical)'
                elif float( int_d['RX_Util'] ) >= float( warn ) or float( int_d['TX_Util'] ) >= float( warn ):
                    status_code = 1
                    status_message = '(Warning)'
            else:
                if float( int_d['RX_Util'] ) + float( int_d['TX_Util'] ) >= float( crit ):
                    status_code = 2
                    status_message = '(Critical)'
                elif float( int_d['RX_Util'] ) + float( int_d['TX_Util'] ) >= float( warn ):
                    status_code = 1
                    status_message = '(Warning)'
            
        # Add performance data to the output
        for x in [ 'RX_MBps', 'RX_Util', 'TX_MBps', 'TX_Util']:
            if x == 'RX_MBps' or x == 'TX_MBps':
                perfdata += x + '=' + str( '%.2f' % int_d[x] ) + 'MBps'
            elif duplex == 'full':
                perfdata += x + '=' + str( '%.2f' % int_d[x] ) + '%'
                if warn is not None and crit is not None :
                    perfdata += ';' + str(warn) + ';' + str(crit)
            perfdata += ' '
        perfdata += 'total_MBps=' + str( '%.2f' % (int_d['TX_MBps'] + int_d['RX_MBps']) ) + 'MBps'
        if duplex != 'full':
            perfdata += ' Total_Util=' + str( '%.2f' % int_d['Total_Util'] ) + '%'
            if warn is not None and crit is not None:
                perfdata += ';' + str(warn) + ';' + str(crit)
            
        # update the interim file
        copy_interface_data('/proc/net/dev', interim_file, interface)

        print (status_message + ' ' + status_outp + '|' + perfdata)
        sys.exit( status_code )

def check_network_error ( interface, warn=None, crit=None ):
    interface_found = 0
    status_code = 0
    status_outp =''
    error_detail=''
    status_message ='(OK)'
    perfdata = ''

    # Verify if the interim file exists, if not create it now
    interim_file = INTERIM_DIR + '/' + 'proc_net_dev_err_' + interface
    if not os.path.isfile( interim_file ):
        file = '/proc/net/dev'
        f = open( file, 'r' )
        try:
            for line in f:
                line = line.strip()
                if line.startswith( interface+':' ):
                    interface_found = 1
                    break
        finally:
            f.close()

        if interface_found == 0:
            print ( 'Network device not found for interface '+interface )
            sys.exit( 3 )

        copy_interface_data('/proc/net/dev', interim_file, interface)
        print ( 'This was the first run, run again to get values: net:' + interface )
        sys.exit( 1 )

    # Get mtime of the interim file and calculate the sample period
    sample_period = float ( time.time() - os.path.getmtime( interim_file ) )

    # Calculate the deltas
    int_t = {}
    int_d = {}
    for file in ['/proc/net/dev', interim_file]:
        f = open( file, 'r' )
        try:
            for line in f:
                line = line.strip()
                if line.startswith( interface+':' ):
                    seq = 0
                    for x in ['rx_bytes','rx_packets','rx_pkt_errors','rx_pkt_drop',
                        'rx_pkt_fifo','rx_pkt_frame','rx_pkt_compressed','rx_pkt_multicast',
                        'tx_bytes','tx_packets','tx_pkt_errors','tx_pkt_drop',
                        'tx_pkt_fifo','tx_pkt_collisions','tx_pkt_carrier','tx_pkt_compressed']:
                        # if files is current/proc, load values in int_t
                        if file == '/proc/net/dev':
                            int_t[x] = int( line.split( interface+':' )[1].split()[seq] )
                        # if file is interim calculate the diff and load deltas in int_d
                        elif file == interim_file:
                            interim_value = int( line.split( interface+':' )[1].split()[seq] )
                            int_d[x] = int_t[x] - interim_value
                        seq += 1
                    break
        finally:
            f.close()

    # Zero length interm file results in network device not found.  Should
    # just handle it the same as a first run and continue.
    if not int_t:
        #interface not found in /proc/net/dev
        print ( 'Plugin Error: Network device not found: ('+interface+')' )
        sys.exit( 3 )

    elif not int_d:
        #interface not found in interim file
        copy_interface_data('/proc/net/dev', interim_file, interface)
        print ( 'Rebuilding missing interim file, run again to get values for interface ' + interface )
        sys.exit( 1 )

    else:
        status_outp += 'Interface: ' + interface
        int_d['PK_ERRORS'] = 0

        # Add receive base data
        int_d['ERROR_RATE'] = round( float( int_d['rx_pkt_errors'] / ( sample_period / 60 ) ), 2 )
        if int_d['ERROR_RATE'] < 0:
            copy_interface_data('/proc/net/dev', interim_file, interface)
            print ( 'System restart since last check, run again to get values for interface ' + interface )
            sys.exit( 0 )
        
        status_outp += ' Rx: ' + str(int_d['ERROR_RATE']) + ' epm'
        perfdata += 'rx_pkt_errors=' + str(int_d['ERROR_RATE'])  + 'epm'
        if warn is not None and crit is not None:
            perfdata += ';' + str(warn) + ';' + str(crit)

        int_d['ERROR_RATE'] = round( float( int_d['rx_packets'] / 1024 / ( sample_period / 60 ) ), 2 )
        status_outp += ' ' + str(int_d['ERROR_RATE']) + ' Kppm'
        perfdata += ' rx_packets=' + str(int_d['ERROR_RATE'])  + 'Kppm'

        # If there are receive errors, add rx data
        error_detail = ''
        for x in ['rx_pkt_drop','rx_pkt_fifo','rx_pkt_frame']:
            int_d['ERROR_RATE'] = round( float( int_d[x] / ( sample_period / 60 ) ), 2 )
            if float( int_d[x] ) > 0:
                error_detail += x + ':' + str(int_d['ERROR_RATE'])  + ' epm '

        if float( int_d['rx_pkt_errors'] ) > 0:
            status_outp += ' (' + error_detail.strip() + ')'

        # Add transmit base data
        int_d['ERROR_RATE'] = round( float( int_d['tx_pkt_errors'] / ( sample_period / 60 ) ), 2 )
        status_outp += ' Tx: ' + str(int_d['ERROR_RATE'])  + ' epm'
        perfdata += ' tx_pkt_errors=' + str(int_d['ERROR_RATE'])  + 'epm'
        if warn is not None and crit is not None:
            perfdata += ';' + str(warn) + ';' + str(crit)

        int_d['ERROR_RATE'] = round( float( int_d['tx_packets'] / 1024 / ( sample_period / 60 ) ), 2 )
        status_outp += ' ' + str(int_d['ERROR_RATE']) + ' Kppm'
        perfdata += ' tx_packets=' + str(int_d['ERROR_RATE'])  + 'Kppm'

        # If there are transmit errors, add tx data
        error_detail = ''
        for x in ['tx_pkt_drop','tx_pkt_fifo','tx_pkt_collisions','tx_pkt_carrier']:
            int_d['ERROR_RATE'] = round( float( int_d[x] / ( sample_period / 60 ) ), 2 )
            if float( int_d[x] ) > 0:
                error_detail += x + ':' + str(int_d['ERROR_RATE'])  + ' epm '

        if float( int_d['tx_pkt_errors'] ) > 0:
            status_outp += ' (' + error_detail.strip() + ')'

        # If thresholds have been set and errors occurred, check to
        # see what status to report (critical, warning, or OK)
        int_d['PK_ERRORS'] = round( float ( ( int_d['rx_pkt_errors'] + int_d['tx_pkt_errors'] ) / ( sample_period / 60 ) ), 2 )
        if warn is not None and crit is not None:
            if float( int_d['PK_ERRORS'] ) >= float( crit ):
                status_code = 2
                status_message = '(Critical)'
            elif float( int_d['PK_ERRORS'] ) >= float( warn ):
                status_code = 1
                status_message = '(Warning)'
            
        # Include the aggregate error count in the output
        status_outp += ' Total: ' + str(int_d['PK_ERRORS']) + ' epm'
        perfdata += ' total_errors=' + str(int_d['PK_ERRORS']) + 'epm'
        if warn is not None and crit is not None:
            perfdata += ';' + str(warn) + ';' + str(crit)

        int_d['PK_ERRORS'] = round( float ( ( int_d['rx_packets'] + int_d['tx_packets'] ) / 1024 / ( sample_period / 60 ) ), 2 )
        status_outp += ' ' + str(int_d['PK_ERRORS']) + ' Kppm'
        perfdata += ' total_packets=' + str(int_d['PK_ERRORS']) + 'Kppm'
        status_outp += ' [' + str( '%.2f' % sample_period ) + ' seconds]'

        # update the interim file
        copy_interface_data('/proc/net/dev', interim_file, interface)
        print (status_message + ' ' + status_outp + '|' + perfdata)
        sys.exit( status_code )

def check_network_bond ( interface=None, warn=None, crit=None ):
    interface_found = 0
    status_code = 0
    status_outp =''
    error_detail=''
    status_message ='(OK)'
    perfdata = ''

    # Read the bonding_masters file to find the network bond interfaces
    bonding_master_file = '/sys/class/net/bonding_masters'
    bond_interfaces = []
    if os.path.isfile( bonding_master_file ):
        f = open( bonding_master_file, 'r' )
        try:
            for line in f:
                bond_interfaces = bond_interfaces + line.split()
        finally:
            f.close()
            for bond_interface in bond_interfaces:
                print ('Bond interface: %s' % bond_interface)
    else:
        print ('No network bond interfaces found')
        sys.exit(0)

    # Check the status of each network bond interface
    print 'Checking bond interfaces ' + str(bond_interfaces)
    interfaces = {}
    for bond_interface in bond_interfaces:
        print 'Processing bond %s' % bond_interface
        f = open('/sys/class/net/' + bond_interface + '/bonding/slaves', 'r')
        try:
            bond_slaves = []
            for line in f:
                bond_slaves = bond_slaves + line.split()
        finally:
            f.close()
            interfaces[bond_interface] = bond_slaves
            print interfaces[bond_interface]
        slaves = {}
        for bond_slave in bond_slaves:
            print 'Slave interface %s' % bond_slave
#            slaves[bond_slave] = 'Up'

            f = open('/sys/class/net/' + bond_interface + '/slave_' + bond_slave + '/operstate', 'r')
            try:
                slave_status = []
                for line in f:
                    slave_status = line.strip()
            finally:
                f.close()
                slaves[bond_slave] = slave_status
                print interfaces[bond_interface]
        interfaces[bond_interface] = slaves
        print interfaces[bond_interface]
    print interfaces
    print status_message + ' ' + status_outp + '|' + perfdata
    sys.exit( status_code )


#####################
# Mainline function #
#####################
if __name__ == '__main__':

    if len( sys.argv ) > 1:
        # network iface warn(rx,tx)  crit(rx,tx)
        if sys.argv[1] == 'network':
            # no arg passed after network iface
            if len( sys.argv ) == 3:
                check_net( sys.argv[2] )
            # if 2 args passed after network iface
            elif len( sys.argv ) == 5:
                #process comma separated arguments
                #we convert it to an array and pass it on
                warn_arr = sys.argv[3].split(',')
                crit_arr = sys.argv[4].split(',')
                if len(warn_arr) != 1 or len(warn_arr) != len(crit_arr):
                    print ( 'Plugin Error: Invalid arguments for ' + sys.argv[1] + ': ('+str(sys.argv)+')' )
                    sys.exit( 3 )
                else:
                    for i in range( len( warn_arr ) ):
                        if float(warn_arr[i]) > float(crit_arr[i]):
                            print ( 'Plugin Error: Warning('+warn_arr[i]+') threshold should be less than critical('+crit_arr[i]+')' )
                            sys.exit( 3 )
                    check_net( sys.argv[2], warn=warn_arr, crit=crit_arr )
            else:
                print ( 'Plugin Error: Invalid arguments for '+sys.argv[1]+': ('+str(sys.argv)+')' )
                sys.exit( 3 )
    
        # network iface bandwidth warn(rx,tx)  crit(rx,tx)
        elif sys.argv[1] == 'network_bandwidth':
            # no arg passed after network iface
            if len( sys.argv ) == 3:
                check_network_bandwidth( sys.argv[2] )
            # if 2 args passed after network iface
            elif len( sys.argv ) == 5:
                if float( sys.argv[4] ) > float( sys.argv[3] ):
                    check_network_bandwidth( sys.argv[2], warn=sys.argv[3], crit=sys.argv[4] )
                else:
                    print ( 'Plugin Error: Critical theshold < warning threshold for ' + sys.argv[1] + ': ('+str(sys.argv)+')' )
                    sys.exit( 3 )
            else:
                print ( 'Plugin Error: Invalid arguments for '+sys.argv[1]+': ('+str(sys.argv)+')' )
                sys.exit( 3 )
    
        # network iface errors warn (count)  crit(count)
        elif sys.argv[1] == 'network_error':
            # no arg passed after network iface
            if len( sys.argv ) == 3:
                check_network_error( sys.argv[2] )
            # if 2 args passed after network iface
            elif len( sys.argv ) == 5:
                if float( sys.argv[4] ) > float( sys.argv[3] ):
                    check_network_error( sys.argv[2], warn=sys.argv[3], crit=sys.argv[4] )
                else:
                    print ( 'Plugin Error: Critical theshold < warning threshold for ' + sys.argv[1] + ': ('+str(sys.argv)+')' )
                    sys.exit( 3 )
            else:
                print ( 'Plugin Error: Invalid arguments for '+sys.argv[1]+': ('+str(sys.argv)+')' )
                sys.exit( 3 )
    
        # network bond status warn (count)  crit(count)
        elif sys.argv[1] == 'network_bond':
            # no arg passed after network iface
            if len( sys.argv ) == 2:
                check_network_bond( )
            elif len( sys.argv ) == 3:
                check_network_bond( sys.argv[2] )
            # if 2 args passed after network iface
            elif len( sys.argv ) == 5:
                if float( sys.argv[4] ) > float( sys.argv[3] ):
                    check_network_bond( sys.argv[2], warn=sys.argv[3], crit=sys.argv[4] )
                else:
                    print ( 'Plugin Error: Critical theshold < warning threshold for ' + sys.argv[1] + ': ('+str(sys.argv)+')' )
                    sys.exit( 3 )
            else:
                print ( 'Plugin Error: Invalid arguments for '+sys.argv[1]+': ('+str(sys.argv)+')' )
                sys.exit( 3 )
        else:
            print ( 'What?' )
            sys.exit( 3 )
